/*
 * This file is generated by jOOQ.
 */
package net.rupyber_studios.rupyber_database_api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.rupyber_studios.rupyber_database_api.jooq.DefaultSchema;
import net.rupyber_studios.rupyber_database_api.jooq.Keys;
import net.rupyber_studios.rupyber_database_api.jooq.tables.IncidentsTable.Incidents;
import net.rupyber_studios.rupyber_database_api.jooq.tables.PlayersTable.Players;
import net.rupyber_studios.rupyber_database_api.jooq.tables.records.IncidentPlayersRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IncidentPlayersTable extends TableImpl<IncidentPlayersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>IncidentPlayers</code>
     */
    public static final IncidentPlayersTable IncidentPlayers = new IncidentPlayersTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncidentPlayersRecord> getRecordType() {
        return IncidentPlayersRecord.class;
    }

    /**
     * The column <code>IncidentPlayers.incidentId</code>.
     */
    public final TableField<IncidentPlayersRecord, Integer> incidentId = createField(DSL.name("incidentId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>IncidentPlayers.role</code>.
     */
    public final TableField<IncidentPlayersRecord, Integer> role = createField(DSL.name("role"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>IncidentPlayers.playerId</code>.
     */
    public final TableField<IncidentPlayersRecord, Integer> playerId = createField(DSL.name("playerId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>IncidentPlayers.addedAt</code>.
     */
    public final TableField<IncidentPlayersRecord, LocalDateTime> addedAt = createField(DSL.name("addedAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>IncidentPlayers.removedAt</code>.
     */
    public final TableField<IncidentPlayersRecord, LocalDateTime> removedAt = createField(DSL.name("removedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private IncidentPlayersTable(Name alias, Table<IncidentPlayersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private IncidentPlayersTable(Name alias, Table<IncidentPlayersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>IncidentPlayers</code> table reference
     */
    public IncidentPlayersTable(String alias) {
        this(DSL.name(alias), IncidentPlayers);
    }

    /**
     * Create an aliased <code>IncidentPlayers</code> table reference
     */
    public IncidentPlayersTable(Name alias) {
        this(alias, IncidentPlayers);
    }

    /**
     * Create a <code>IncidentPlayers</code> table reference
     */
    public IncidentPlayersTable() {
        this(DSL.name("IncidentPlayers"), null);
    }

    public <O extends Record> IncidentPlayersTable(Table<O> path, ForeignKey<O, IncidentPlayersRecord> childPath, InverseForeignKey<O, IncidentPlayersRecord> parentPath) {
        super(path, childPath, parentPath, IncidentPlayers);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class IncidentPlayers extends IncidentPlayersTable implements Path<IncidentPlayersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> IncidentPlayers(Table<O> path, ForeignKey<O, IncidentPlayersRecord> childPath, InverseForeignKey<O, IncidentPlayersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private IncidentPlayers(Name alias, Table<IncidentPlayersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public IncidentPlayers as(String alias) {
            return new IncidentPlayers(DSL.name(alias), this);
        }

        @Override
        public IncidentPlayers as(Name alias) {
            return new IncidentPlayers(alias, this);
        }

        @Override
        public IncidentPlayers as(Table<?> alias) {
            return new IncidentPlayers(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<ForeignKey<IncidentPlayersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.fk_IncidentPlayers_pk_Incidents, Keys.fk_IncidentPlayers_pk_Players);
    }

    private transient Incidents _incidents;

    /**
     * Get the implicit join path to the <code>Incidents</code> table.
     */
    public Incidents incidents() {
        if (_incidents == null)
            _incidents = new Incidents(this, Keys.fk_IncidentPlayers_pk_Incidents, null);

        return _incidents;
    }

    private transient Players _players;

    /**
     * Get the implicit join path to the <code>Players</code> table.
     */
    public Players players() {
        if (_players == null)
            _players = new Players(this, Keys.fk_IncidentPlayers_pk_Players, null);

        return _players;
    }

    @Override
    public IncidentPlayersTable as(String alias) {
        return new IncidentPlayersTable(DSL.name(alias), this);
    }

    @Override
    public IncidentPlayersTable as(Name alias) {
        return new IncidentPlayersTable(alias, this);
    }

    @Override
    public IncidentPlayersTable as(Table<?> alias) {
        return new IncidentPlayersTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentPlayersTable rename(String name) {
        return new IncidentPlayersTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentPlayersTable rename(Name name) {
        return new IncidentPlayersTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentPlayersTable rename(Table<?> name) {
        return new IncidentPlayersTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentPlayersTable where(Condition condition) {
        return new IncidentPlayersTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentPlayersTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentPlayersTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentPlayersTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentPlayersTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentPlayersTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentPlayersTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentPlayersTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentPlayersTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentPlayersTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
