/*
 * This file is generated by jOOQ.
 */
package net.rupyber_studios.rupyber_database_api.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.rupyber_studios.rupyber_database_api.jooq.DefaultSchema;
import net.rupyber_studios.rupyber_database_api.jooq.Keys;
import net.rupyber_studios.rupyber_database_api.jooq.tables.IncidentsTable.Incidents;
import net.rupyber_studios.rupyber_database_api.jooq.tables.records.IncidentTypesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IncidentTypesTable extends TableImpl<IncidentTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>IncidentTypes</code>
     */
    public static final IncidentTypesTable IncidentTypes = new IncidentTypesTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncidentTypesRecord> getRecordType() {
        return IncidentTypesRecord.class;
    }

    /**
     * The column <code>IncidentTypes.id</code>.
     */
    public final TableField<IncidentTypesRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>IncidentTypes.code</code>.
     */
    public final TableField<IncidentTypesRecord, String> code = createField(DSL.name("code"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>IncidentTypes.color</code>.
     */
    public final TableField<IncidentTypesRecord, Integer> color = createField(DSL.name("color"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>IncidentTypes.description</code>.
     */
    public final TableField<IncidentTypesRecord, String> description = createField(DSL.name("description"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private IncidentTypesTable(Name alias, Table<IncidentTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private IncidentTypesTable(Name alias, Table<IncidentTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>IncidentTypes</code> table reference
     */
    public IncidentTypesTable(String alias) {
        this(DSL.name(alias), IncidentTypes);
    }

    /**
     * Create an aliased <code>IncidentTypes</code> table reference
     */
    public IncidentTypesTable(Name alias) {
        this(alias, IncidentTypes);
    }

    /**
     * Create a <code>IncidentTypes</code> table reference
     */
    public IncidentTypesTable() {
        this(DSL.name("IncidentTypes"), null);
    }

    public <O extends Record> IncidentTypesTable(Table<O> path, ForeignKey<O, IncidentTypesRecord> childPath, InverseForeignKey<O, IncidentTypesRecord> parentPath) {
        super(path, childPath, parentPath, IncidentTypes);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class IncidentTypes extends IncidentTypesTable implements Path<IncidentTypesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> IncidentTypes(Table<O> path, ForeignKey<O, IncidentTypesRecord> childPath, InverseForeignKey<O, IncidentTypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private IncidentTypes(Name alias, Table<IncidentTypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public IncidentTypes as(String alias) {
            return new IncidentTypes(DSL.name(alias), this);
        }

        @Override
        public IncidentTypes as(Name alias) {
            return new IncidentTypes(alias, this);
        }

        @Override
        public IncidentTypes as(Table<?> alias) {
            return new IncidentTypes(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<IncidentTypesRecord> getPrimaryKey() {
        return Keys.pk_IncidentTypes;
    }

    @Override
    public List<UniqueKey<IncidentTypesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.uk_IncidentTypes_100673796);
    }

    private transient Incidents _incidents;

    /**
     * Get the implicit to-many join path to the <code>Incidents</code> table
     */
    public Incidents incidents() {
        if (_incidents == null)
            _incidents = new Incidents(this, null, Keys.fk_Incidents_pk_IncidentTypes.getInverseKey());

        return _incidents;
    }

    @Override
    public IncidentTypesTable as(String alias) {
        return new IncidentTypesTable(DSL.name(alias), this);
    }

    @Override
    public IncidentTypesTable as(Name alias) {
        return new IncidentTypesTable(alias, this);
    }

    @Override
    public IncidentTypesTable as(Table<?> alias) {
        return new IncidentTypesTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentTypesTable rename(String name) {
        return new IncidentTypesTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentTypesTable rename(Name name) {
        return new IncidentTypesTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentTypesTable rename(Table<?> name) {
        return new IncidentTypesTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentTypesTable where(Condition condition) {
        return new IncidentTypesTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentTypesTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentTypesTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentTypesTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentTypesTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentTypesTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentTypesTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentTypesTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentTypesTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentTypesTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
