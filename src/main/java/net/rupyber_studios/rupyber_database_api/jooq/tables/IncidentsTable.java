/*
 * This file is generated by jOOQ.
 */
package net.rupyber_studios.rupyber_database_api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.rupyber_studios.rupyber_database_api.jooq.DefaultSchema;
import net.rupyber_studios.rupyber_database_api.jooq.Keys;
import net.rupyber_studios.rupyber_database_api.jooq.tables.EmergencyCallsTable.EmergencyCalls;
import net.rupyber_studios.rupyber_database_api.jooq.tables.IncidentPlayersTable.IncidentPlayers;
import net.rupyber_studios.rupyber_database_api.jooq.tables.IncidentTypesTable.IncidentTypes;
import net.rupyber_studios.rupyber_database_api.jooq.tables.PlayersTable.Players;
import net.rupyber_studios.rupyber_database_api.jooq.tables.PrioritiesTable.Priorities;
import net.rupyber_studios.rupyber_database_api.jooq.tables.RecipientsTable.Recipients;
import net.rupyber_studios.rupyber_database_api.jooq.tables.ResponseCodesTable.ResponseCodes;
import net.rupyber_studios.rupyber_database_api.jooq.tables.records.IncidentsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IncidentsTable extends TableImpl<IncidentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Incidents</code>
     */
    public static final IncidentsTable Incidents = new IncidentsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncidentsRecord> getRecordType() {
        return IncidentsRecord.class;
    }

    /**
     * The column <code>Incidents.id</code>.
     */
    public final TableField<IncidentsRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Incidents.incidentNumber</code>.
     */
    public final TableField<IncidentsRecord, Integer> incidentNumber = createField(DSL.name("incidentNumber"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.emergencyCallId</code>.
     */
    public final TableField<IncidentsRecord, Integer> emergencyCallId = createField(DSL.name("emergencyCallId"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Incidents.priorityId</code>.
     */
    public final TableField<IncidentsRecord, Integer> priorityId = createField(DSL.name("priorityId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.responseCodeId</code>.
     */
    public final TableField<IncidentsRecord, Integer> responseCodeId = createField(DSL.name("responseCodeId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.recipientsId</code>.
     */
    public final TableField<IncidentsRecord, Integer> recipientsId = createField(DSL.name("recipientsId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.incidentTypeId</code>.
     */
    public final TableField<IncidentsRecord, Integer> incidentTypeId = createField(DSL.name("incidentTypeId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.locationX</code>.
     */
    public final TableField<IncidentsRecord, Integer> locationX = createField(DSL.name("locationX"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.locationY</code>.
     */
    public final TableField<IncidentsRecord, Integer> locationY = createField(DSL.name("locationY"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.locationZ</code>.
     */
    public final TableField<IncidentsRecord, Integer> locationZ = createField(DSL.name("locationZ"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.description</code>.
     */
    public final TableField<IncidentsRecord, String> description = createField(DSL.name("description"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>Incidents.createdAt</code>.
     */
    public final TableField<IncidentsRecord, LocalDateTime> createdAt = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>Incidents.createdBy</code>.
     */
    public final TableField<IncidentsRecord, Integer> createdBy = createField(DSL.name("createdBy"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Incidents.closedAt</code>.
     */
    public final TableField<IncidentsRecord, LocalDateTime> closedAt = createField(DSL.name("closedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>Incidents.closedBy</code>.
     */
    public final TableField<IncidentsRecord, Integer> closedBy = createField(DSL.name("closedBy"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private IncidentsTable(Name alias, Table<IncidentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private IncidentsTable(Name alias, Table<IncidentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Incidents</code> table reference
     */
    public IncidentsTable(String alias) {
        this(DSL.name(alias), Incidents);
    }

    /**
     * Create an aliased <code>Incidents</code> table reference
     */
    public IncidentsTable(Name alias) {
        this(alias, Incidents);
    }

    /**
     * Create a <code>Incidents</code> table reference
     */
    public IncidentsTable() {
        this(DSL.name("Incidents"), null);
    }

    public <O extends Record> IncidentsTable(Table<O> path, ForeignKey<O, IncidentsRecord> childPath, InverseForeignKey<O, IncidentsRecord> parentPath) {
        super(path, childPath, parentPath, Incidents);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class Incidents extends IncidentsTable implements Path<IncidentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> Incidents(Table<O> path, ForeignKey<O, IncidentsRecord> childPath, InverseForeignKey<O, IncidentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private Incidents(Name alias, Table<IncidentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public Incidents as(String alias) {
            return new Incidents(DSL.name(alias), this);
        }

        @Override
        public Incidents as(Name alias) {
            return new Incidents(alias, this);
        }

        @Override
        public Incidents as(Table<?> alias) {
            return new Incidents(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<IncidentsRecord> getPrimaryKey() {
        return Keys.pk_Incidents;
    }

    @Override
    public List<ForeignKey<IncidentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.fk_Incidents_pk_EmergencyCalls, Keys.fk_Incidents_pk_Priorities, Keys.fk_Incidents_pk_ResponseCodes, Keys.fk_Incidents_pk_Recipients, Keys.fk_Incidents_pk_IncidentTypes, Keys.fk_Incidents_pk_Players);
    }

    private transient EmergencyCalls _emergencycalls;

    /**
     * Get the implicit join path to the <code>EmergencyCalls</code> table.
     */
    public EmergencyCalls emergencycalls() {
        if (_emergencycalls == null)
            _emergencycalls = new EmergencyCalls(this, Keys.fk_Incidents_pk_EmergencyCalls, null);

        return _emergencycalls;
    }

    private transient Priorities _priorities;

    /**
     * Get the implicit join path to the <code>Priorities</code> table.
     */
    public Priorities priorities() {
        if (_priorities == null)
            _priorities = new Priorities(this, Keys.fk_Incidents_pk_Priorities, null);

        return _priorities;
    }

    private transient ResponseCodes _responsecodes;

    /**
     * Get the implicit join path to the <code>ResponseCodes</code> table.
     */
    public ResponseCodes responsecodes() {
        if (_responsecodes == null)
            _responsecodes = new ResponseCodes(this, Keys.fk_Incidents_pk_ResponseCodes, null);

        return _responsecodes;
    }

    private transient Recipients _recipients;

    /**
     * Get the implicit join path to the <code>Recipients</code> table.
     */
    public Recipients recipients() {
        if (_recipients == null)
            _recipients = new Recipients(this, Keys.fk_Incidents_pk_Recipients, null);

        return _recipients;
    }

    private transient IncidentTypes _incidenttypes;

    /**
     * Get the implicit join path to the <code>IncidentTypes</code> table.
     */
    public IncidentTypes incidenttypes() {
        if (_incidenttypes == null)
            _incidenttypes = new IncidentTypes(this, Keys.fk_Incidents_pk_IncidentTypes, null);

        return _incidenttypes;
    }

    private transient Players _players;

    /**
     * Get the implicit join path to the <code>Players</code> table.
     */
    public Players players() {
        if (_players == null)
            _players = new Players(this, Keys.fk_Incidents_pk_Players, null);

        return _players;
    }

    private transient IncidentPlayers _incidentplayers;

    /**
     * Get the implicit to-many join path to the <code>IncidentPlayers</code>
     * table
     */
    public IncidentPlayers incidentplayers() {
        if (_incidentplayers == null)
            _incidentplayers = new IncidentPlayers(this, null, Keys.fk_IncidentPlayers_pk_Incidents.getInverseKey());

        return _incidentplayers;
    }

    @Override
    public IncidentsTable as(String alias) {
        return new IncidentsTable(DSL.name(alias), this);
    }

    @Override
    public IncidentsTable as(Name alias) {
        return new IncidentsTable(alias, this);
    }

    @Override
    public IncidentsTable as(Table<?> alias) {
        return new IncidentsTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentsTable rename(String name) {
        return new IncidentsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentsTable rename(Name name) {
        return new IncidentsTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncidentsTable rename(Table<?> name) {
        return new IncidentsTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentsTable where(Condition condition) {
        return new IncidentsTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentsTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentsTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentsTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentsTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentsTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentsTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IncidentsTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentsTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IncidentsTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
