/*
 * This file is generated by jOOQ.
 */
package net.rupyber_studios.rupyber_database_api.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.rupyber_studios.rupyber_database_api.jooq.DefaultSchema;
import net.rupyber_studios.rupyber_database_api.jooq.Keys;
import net.rupyber_studios.rupyber_database_api.jooq.tables.EmergencyCallsTable.EmergencyCalls;
import net.rupyber_studios.rupyber_database_api.jooq.tables.IncidentPlayersTable.IncidentPlayers;
import net.rupyber_studios.rupyber_database_api.jooq.tables.IncidentsTable.Incidents;
import net.rupyber_studios.rupyber_database_api.jooq.tables.RanksTable.Ranks;
import net.rupyber_studios.rupyber_database_api.jooq.tables.StatusLogsTable.StatusLogs;
import net.rupyber_studios.rupyber_database_api.jooq.tables.StatusesTable.Statuses;
import net.rupyber_studios.rupyber_database_api.jooq.tables.records.PlayersRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayersTable extends TableImpl<PlayersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Players</code>
     */
    public static final PlayersTable Players = new PlayersTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayersRecord> getRecordType() {
        return PlayersRecord.class;
    }

    /**
     * The column <code>Players.id</code>.
     */
    public final TableField<PlayersRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Players.uuid</code>.
     */
    public final TableField<PlayersRecord, String> uuid = createField(DSL.name("uuid"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>Players.username</code>.
     */
    public final TableField<PlayersRecord, String> username = createField(DSL.name("username"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>Players.online</code>.
     */
    public final TableField<PlayersRecord, Boolean> online = createField(DSL.name("online"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("TRUE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>Players.statusId</code>.
     */
    public final TableField<PlayersRecord, Integer> statusId = createField(DSL.name("statusId"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Players.rankId</code>.
     */
    public final TableField<PlayersRecord, Integer> rankId = createField(DSL.name("rankId"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Players.callsign</code>.
     */
    public final TableField<PlayersRecord, String> callsign = createField(DSL.name("callsign"), SQLDataType.VARCHAR(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>Players.callsignReserved</code>.
     */
    public final TableField<PlayersRecord, Boolean> callsignReserved = createField(DSL.name("callsignReserved"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>Players.password</code>.
     */
    public final TableField<PlayersRecord, String> password = createField(DSL.name("password"), SQLDataType.CHAR(8).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>Players.token</code>.
     */
    public final TableField<PlayersRecord, String> token = createField(DSL.name("token"), SQLDataType.CHAR(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>Players.settings</code>.
     */
    public final TableField<PlayersRecord, String> settings = createField(DSL.name("settings"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'{\"compactMode\":false,\"condensedFont\":false,\"sharpMode\":false}'"), SQLDataType.VARCHAR)), this, "");

    private PlayersTable(Name alias, Table<PlayersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlayersTable(Name alias, Table<PlayersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Players</code> table reference
     */
    public PlayersTable(String alias) {
        this(DSL.name(alias), Players);
    }

    /**
     * Create an aliased <code>Players</code> table reference
     */
    public PlayersTable(Name alias) {
        this(alias, Players);
    }

    /**
     * Create a <code>Players</code> table reference
     */
    public PlayersTable() {
        this(DSL.name("Players"), null);
    }

    public <O extends Record> PlayersTable(Table<O> path, ForeignKey<O, PlayersRecord> childPath, InverseForeignKey<O, PlayersRecord> parentPath) {
        super(path, childPath, parentPath, Players);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class Players extends PlayersTable implements Path<PlayersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> Players(Table<O> path, ForeignKey<O, PlayersRecord> childPath, InverseForeignKey<O, PlayersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private Players(Name alias, Table<PlayersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public Players as(String alias) {
            return new Players(DSL.name(alias), this);
        }

        @Override
        public Players as(Name alias) {
            return new Players(alias, this);
        }

        @Override
        public Players as(Table<?> alias) {
            return new Players(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PlayersRecord> getPrimaryKey() {
        return Keys.pk_Players;
    }

    @Override
    public List<ForeignKey<PlayersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.fk_Players_pk_Statuses, Keys.fk_Players_pk_Ranks);
    }

    private transient Statuses _statuses;

    /**
     * Get the implicit join path to the <code>Statuses</code> table.
     */
    public Statuses statuses() {
        if (_statuses == null)
            _statuses = new Statuses(this, Keys.fk_Players_pk_Statuses, null);

        return _statuses;
    }

    private transient Ranks _ranks;

    /**
     * Get the implicit join path to the <code>Ranks</code> table.
     */
    public Ranks ranks() {
        if (_ranks == null)
            _ranks = new Ranks(this, Keys.fk_Players_pk_Ranks, null);

        return _ranks;
    }

    private transient EmergencyCalls _emergencycalls;

    /**
     * Get the implicit to-many join path to the <code>EmergencyCalls</code>
     * table
     */
    public EmergencyCalls emergencycalls() {
        if (_emergencycalls == null)
            _emergencycalls = new EmergencyCalls(this, null, Keys.fk_EmergencyCalls_pk_Players.getInverseKey());

        return _emergencycalls;
    }

    private transient IncidentPlayers _incidentplayers;

    /**
     * Get the implicit to-many join path to the <code>IncidentPlayers</code>
     * table
     */
    public IncidentPlayers incidentplayers() {
        if (_incidentplayers == null)
            _incidentplayers = new IncidentPlayers(this, null, Keys.fk_IncidentPlayers_pk_Players.getInverseKey());

        return _incidentplayers;
    }

    private transient Incidents _incidents;

    /**
     * Get the implicit to-many join path to the <code>Incidents</code> table
     */
    public Incidents incidents() {
        if (_incidents == null)
            _incidents = new Incidents(this, null, Keys.fk_Incidents_pk_Players.getInverseKey());

        return _incidents;
    }

    private transient StatusLogs _statuslogs;

    /**
     * Get the implicit to-many join path to the <code>StatusLogs</code> table
     */
    public StatusLogs statuslogs() {
        if (_statuslogs == null)
            _statuslogs = new StatusLogs(this, null, Keys.fk_StatusLogs_pk_Players.getInverseKey());

        return _statuslogs;
    }

    @Override
    public PlayersTable as(String alias) {
        return new PlayersTable(DSL.name(alias), this);
    }

    @Override
    public PlayersTable as(Name alias) {
        return new PlayersTable(alias, this);
    }

    @Override
    public PlayersTable as(Table<?> alias) {
        return new PlayersTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayersTable rename(String name) {
        return new PlayersTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayersTable rename(Name name) {
        return new PlayersTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayersTable rename(Table<?> name) {
        return new PlayersTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayersTable where(Condition condition) {
        return new PlayersTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayersTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayersTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayersTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayersTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayersTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayersTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayersTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayersTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayersTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
