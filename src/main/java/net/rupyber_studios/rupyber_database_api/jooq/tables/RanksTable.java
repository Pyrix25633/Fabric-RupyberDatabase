/*
 * This file is generated by jOOQ.
 */
package net.rupyber_studios.rupyber_database_api.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.rupyber_studios.rupyber_database_api.jooq.DefaultSchema;
import net.rupyber_studios.rupyber_database_api.jooq.Keys;
import net.rupyber_studios.rupyber_database_api.jooq.tables.PlayersTable.Players;
import net.rupyber_studios.rupyber_database_api.jooq.tables.records.RanksRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RanksTable extends TableImpl<RanksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Ranks</code>
     */
    public static final RanksTable Ranks = new RanksTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RanksRecord> getRecordType() {
        return RanksRecord.class;
    }

    /**
     * The column <code>Ranks.id</code>.
     */
    public final TableField<RanksRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Ranks.rank</code>.
     */
    public final TableField<RanksRecord, String> rank = createField(DSL.name("rank"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>Ranks.color</code>.
     */
    public final TableField<RanksRecord, Integer> color = createField(DSL.name("color"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Ranks.emergencyOperator</code>.
     */
    public final TableField<RanksRecord, Boolean> emergencyOperator = createField(DSL.name("emergencyOperator"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private RanksTable(Name alias, Table<RanksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RanksTable(Name alias, Table<RanksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Ranks</code> table reference
     */
    public RanksTable(String alias) {
        this(DSL.name(alias), Ranks);
    }

    /**
     * Create an aliased <code>Ranks</code> table reference
     */
    public RanksTable(Name alias) {
        this(alias, Ranks);
    }

    /**
     * Create a <code>Ranks</code> table reference
     */
    public RanksTable() {
        this(DSL.name("Ranks"), null);
    }

    public <O extends Record> RanksTable(Table<O> path, ForeignKey<O, RanksRecord> childPath, InverseForeignKey<O, RanksRecord> parentPath) {
        super(path, childPath, parentPath, Ranks);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class Ranks extends RanksTable implements Path<RanksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> Ranks(Table<O> path, ForeignKey<O, RanksRecord> childPath, InverseForeignKey<O, RanksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private Ranks(Name alias, Table<RanksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public Ranks as(String alias) {
            return new Ranks(DSL.name(alias), this);
        }

        @Override
        public Ranks as(Name alias) {
            return new Ranks(alias, this);
        }

        @Override
        public Ranks as(Table<?> alias) {
            return new Ranks(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RanksRecord> getPrimaryKey() {
        return Keys.pk_Ranks;
    }

    @Override
    public List<UniqueKey<RanksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.uk_Ranks_87102373);
    }

    private transient Players _players;

    /**
     * Get the implicit to-many join path to the <code>Players</code> table
     */
    public Players players() {
        if (_players == null)
            _players = new Players(this, null, Keys.fk_Players_pk_Ranks.getInverseKey());

        return _players;
    }

    @Override
    public RanksTable as(String alias) {
        return new RanksTable(DSL.name(alias), this);
    }

    @Override
    public RanksTable as(Name alias) {
        return new RanksTable(alias, this);
    }

    @Override
    public RanksTable as(Table<?> alias) {
        return new RanksTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RanksTable rename(String name) {
        return new RanksTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RanksTable rename(Name name) {
        return new RanksTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RanksTable rename(Table<?> name) {
        return new RanksTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RanksTable where(Condition condition) {
        return new RanksTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RanksTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RanksTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RanksTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RanksTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RanksTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RanksTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RanksTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RanksTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RanksTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
