/*
 * This file is generated by jOOQ.
 */
package net.rupyber_studios.rupyber_database_api.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.rupyber_studios.rupyber_database_api.jooq.DefaultSchema;
import net.rupyber_studios.rupyber_database_api.jooq.Keys;
import net.rupyber_studios.rupyber_database_api.jooq.tables.PlayersTable.Players;
import net.rupyber_studios.rupyber_database_api.jooq.tables.StatusLogsTable.StatusLogs;
import net.rupyber_studios.rupyber_database_api.jooq.tables.records.StatusesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatusesTable extends TableImpl<StatusesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Statuses</code>
     */
    public static final StatusesTable Statuses = new StatusesTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatusesRecord> getRecordType() {
        return StatusesRecord.class;
    }

    /**
     * The column <code>Statuses.id</code>.
     */
    public final TableField<StatusesRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Statuses.status</code>.
     */
    public final TableField<StatusesRecord, String> status = createField(DSL.name("status"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>Statuses.color</code>.
     */
    public final TableField<StatusesRecord, Integer> color = createField(DSL.name("color"), SQLDataType.INTEGER.nullable(false), this, "");

    private StatusesTable(Name alias, Table<StatusesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private StatusesTable(Name alias, Table<StatusesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Statuses</code> table reference
     */
    public StatusesTable(String alias) {
        this(DSL.name(alias), Statuses);
    }

    /**
     * Create an aliased <code>Statuses</code> table reference
     */
    public StatusesTable(Name alias) {
        this(alias, Statuses);
    }

    /**
     * Create a <code>Statuses</code> table reference
     */
    public StatusesTable() {
        this(DSL.name("Statuses"), null);
    }

    public <O extends Record> StatusesTable(Table<O> path, ForeignKey<O, StatusesRecord> childPath, InverseForeignKey<O, StatusesRecord> parentPath) {
        super(path, childPath, parentPath, Statuses);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class Statuses extends StatusesTable implements Path<StatusesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> Statuses(Table<O> path, ForeignKey<O, StatusesRecord> childPath, InverseForeignKey<O, StatusesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private Statuses(Name alias, Table<StatusesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public Statuses as(String alias) {
            return new Statuses(DSL.name(alias), this);
        }

        @Override
        public Statuses as(Name alias) {
            return new Statuses(alias, this);
        }

        @Override
        public Statuses as(Table<?> alias) {
            return new Statuses(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<StatusesRecord> getPrimaryKey() {
        return Keys.pk_Statuses;
    }

    @Override
    public List<UniqueKey<StatusesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.uk_Statuses_75748412);
    }

    private transient Players _players;

    /**
     * Get the implicit to-many join path to the <code>Players</code> table
     */
    public Players players() {
        if (_players == null)
            _players = new Players(this, null, Keys.fk_Players_pk_Statuses.getInverseKey());

        return _players;
    }

    private transient StatusLogs _statuslogs;

    /**
     * Get the implicit to-many join path to the <code>StatusLogs</code> table
     */
    public StatusLogs statuslogs() {
        if (_statuslogs == null)
            _statuslogs = new StatusLogs(this, null, Keys.fk_StatusLogs_pk_Statuses.getInverseKey());

        return _statuslogs;
    }

    @Override
    public StatusesTable as(String alias) {
        return new StatusesTable(DSL.name(alias), this);
    }

    @Override
    public StatusesTable as(Name alias) {
        return new StatusesTable(alias, this);
    }

    @Override
    public StatusesTable as(Table<?> alias) {
        return new StatusesTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatusesTable rename(String name) {
        return new StatusesTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatusesTable rename(Name name) {
        return new StatusesTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatusesTable rename(Table<?> name) {
        return new StatusesTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StatusesTable where(Condition condition) {
        return new StatusesTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StatusesTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StatusesTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StatusesTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StatusesTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StatusesTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StatusesTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StatusesTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StatusesTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StatusesTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
